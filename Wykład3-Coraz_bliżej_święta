class MyPolynomial:
  def __init__(self, *arg):
    self.__shadow = 'nie ma mnie'
    self.polynomial = list()
    if len(arg) == 0:
      self.polynomial.append(0)
    else:
      for x in range (len(arg)):
        self.polynomial.append(arg[x])
      
  def __str__ (self):
    result = str(self.polynomial[0])
    if len(self.polynomial) > 1:
      for x in range(1,len(self.polynomial)):
        if (self.polynomial[x] != 0):
          result = result + ' + ' + str(self.polynomial[x]) + 'x^'+str(x)
    return(result)

  def __eq__(self, other):
    return str(self) == other
    
  def __repr__(self):
    if len(self.polynomial) > 0:
      result = 'MyPolynomial(' + str(self.polynomial[0]) 
      if len(self.polynomial) > 1:
        for x in range(1,len(self.polynomial)):
          if not((self.polynomial[x] == self.polynomial[x-1]) and (self.polynomial[x] == 0)):
            result =  result + ', ' + str(self.polynomial[x])
    else:
      result = 'MyPolynomial(0'
    result = result + ')'
    return(result)
    
  def degree(self):
    v_degree = len(self.polynomial)-1
    for x in reversed(range(v_degree)):
      if self.polynomial[x+1] != 0:
        return v_degree
      else:
        v_degree = v_degree-1
    return v_degree
      
  @classmethod
  def from_iterable(cls, *arg):
    print('type(arg):', type(arg[0]))
    print(arg[0])
    result = cls(*arg[0])
    print('result:',type( result))
    print(result)
    return result 
  
  def __add__(self, other):
    result = list()
    if self.degree() == other.degree():
      for i in range (len(self.polynomial)):
        result.append(self.polynomial[i]+other.polynomial[i])
    elif  self.degree() > other.degree():
      for i in range (len(other.polynomial)):
        result.append(self.polynomial[i]+other.polynomial[i])
      for i in range (len(other.polynomial),len(self.polynomial)):
        result.append(self.polynomial[i])
    else:
      for i in range (len(self.polynomial)):
        result.append(self.polynomial[i]+other.polynomial[i])
      for i in range (len(self.polynomial),len(other.polynomial)):
        result.append(other.polynomial[i])
    return MyPolynomial(*result)
    
  def __iadd__(self, other):
    if self.degree() == other.degree():
      for i in range (len(self.polynomial)):
        self.polynomial[i] = (self.polynomial[i]+other.polynomial[i])
    elif  self.degree() > other.degree():
      for i in range (len(other.polynomial)):
        self.polynomial[i] = (self.polynomial[i]+other.polynomial[i])
    else:
      for i in range (len(self.polynomial)):
        self.polynomial[i] = (self.polynomial[i]+other.polynomial[i])
      for i in range (len(self.polynomial),len(other.polynomial)):
        self.polynomial.append(other.polynomial[i])
    return self
    
  def __mul__(self, other):
    
    if type(other) != int:
      if len(self.polynomial) >= len(other.polynomial):
        result = self.polynomial.copy()
      else:
        result = other.polynomial.copy()
      for x in range(len(result)):
        result[x]=0
      for i in range (len(self.polynomial)):
        for j in range (len(other.polynomial)):
          if ((i+j) <= (len(result)-1)):
            result[(i+j)] += (self.polynomial[i]*other.polynomial[j])
          else:
            result.append(self.polynomial[i]*other.polynomial[j])
          #if (i==0) or (j==0):
          #  result[max(i,j)] += (self.polynomial[i]*other.polynomial[j])
          #elif max(i,j) == (len(result)-1):
          #  result.append(self.polynomial[i]*other.polynomial[j])
          #else:
          #  result[max(i,j)+1] +=  (self.polynomial[i]*other.polynomial[j])
    elif (type(other) == int):
      result = self.polynomial.copy()
      for i in range (len(self.polynomial)):
        result[i] = self.polynomial[i]*other
    self.polynomial=result
    return self
    
  def __rmul__(self, other):
    return self * other  


print(MyPolynomial(2, 2) * MyPolynomial(3, 4))
print(MyPolynomial(3, 7, 4) * 2)
print(2*MyPolynomial(3, 7, 4))
print(MyPolynomial(1, 4, 7, 10, 8))
print(MyPolynomial(1, 2) * MyPolynomial(1, 2, 3, 4))
print(MyPolynomial(3, 1, 2) * MyPolynomial(3, 1, 2))
print(MyPolynomial(9, 6, 13, 4, 4))
assert MyPolynomial(6, 14, 8) == MyPolynomial(2, 2) * MyPolynomial(3, 4)
assert MyPolynomial(6, 14, 8) == MyPolynomial(3, 7, 4) * 2
assert MyPolynomial(6, 14, 8) == 2 * MyPolynomial(3, 7, 4)
